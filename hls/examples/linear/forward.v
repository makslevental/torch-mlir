// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forward_forward,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a12ti-csg325-1L,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.149000,HLS_SYN_LAT=57384008,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1036,HLS_SYN_LUT=834,HLS_VERSION=2021_2}" *)

module forward (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg_2,
        arg_3,
        arg_4,
        arg_5,
        arg_6,
        arg_7,
        arg_8,
        arg_9,
        arg_10_i,
        arg_10_o,
        arg_10_o_ap_vld,
        arg_11,
        arg_12,
        arg_13,
        arg_14,
        arg_15
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] arg_2;
input  [31:0] arg_3;
input  [63:0] arg_4;
input  [63:0] arg_5;
input  [63:0] arg_6;
input  [63:0] arg_7;
input  [63:0] arg_8;
input  [31:0] arg_9;
input  [31:0] arg_10_i;
output  [31:0] arg_10_o;
output   arg_10_o_ap_vld;
input  [63:0] arg_11;
input  [63:0] arg_12;
input  [63:0] arg_13;
input  [63:0] arg_14;
input  [63:0] arg_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] arg_10_o;
reg arg_10_o_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_84_p2;
reg   [31:0] val_s_reg_134;
wire    ap_CS_fsm_state8;
wire   [12:0] indvar_flatten_next_fu_108_p2;
reg   [12:0] indvar_flatten_next_reg_142;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_flatten_fu_102_p2;
wire   [31:0] empty_5_fu_114_p1;
reg   [31:0] empty_5_reg_152;
wire    ap_CS_fsm_state10;
wire    grp_forward_Pipeline_1_fu_76_ap_start;
wire    grp_forward_Pipeline_1_fu_76_ap_done;
wire    grp_forward_Pipeline_1_fu_76_ap_idle;
wire    grp_forward_Pipeline_1_fu_76_ap_ready;
wire   [31:0] grp_forward_Pipeline_1_fu_76_arg_10;
wire    grp_forward_Pipeline_1_fu_76_arg_10_ap_vld;
reg    grp_forward_Pipeline_1_fu_76_ap_start_reg;
wire    ap_CS_fsm_state11;
reg   [12:0] indvar_flatten_fu_60;
wire   [31:0] grp_fu_84_p0;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_forward_Pipeline_1_fu_76_ap_start_reg = 1'b0;
end

forward_forward_Pipeline_1 grp_forward_Pipeline_1_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_Pipeline_1_fu_76_ap_start),
    .ap_done(grp_forward_Pipeline_1_fu_76_ap_done),
    .ap_idle(grp_forward_Pipeline_1_fu_76_ap_idle),
    .ap_ready(grp_forward_Pipeline_1_fu_76_ap_ready),
    .empty(empty_5_reg_152),
    .val_s(val_s_reg_134),
    .arg_10(grp_forward_Pipeline_1_fu_76_arg_10),
    .arg_10_ap_vld(grp_forward_Pipeline_1_fu_76_arg_10_ap_vld)
);

forward_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_84_p0),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_forward_Pipeline_1_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_forward_Pipeline_1_fu_76_ap_ready == 1'b1)) begin
            grp_forward_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_60 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_fu_60 <= indvar_flatten_next_reg_142;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_5_reg_152 <= empty_5_fu_114_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten_next_reg_142 <= indvar_flatten_next_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        val_s_reg_134 <= grp_fu_84_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_forward_Pipeline_1_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((exitcond_flatten_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_forward_Pipeline_1_fu_76_arg_10_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        arg_10_o = grp_forward_Pipeline_1_fu_76_arg_10;
    end else begin
        arg_10_o = arg_10_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        arg_10_o_ap_vld = grp_forward_Pipeline_1_fu_76_arg_10_ap_vld;
    end else begin
        arg_10_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_flatten_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_forward_Pipeline_1_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign empty_5_fu_114_p1 = arg_10_i;

assign exitcond_flatten_fu_102_p2 = ((indvar_flatten_fu_60 == 13'd8000) ? 1'b1 : 1'b0);

assign grp_forward_Pipeline_1_fu_76_ap_start = grp_forward_Pipeline_1_fu_76_ap_start_reg;

assign grp_fu_84_p0 = arg_3;

assign indvar_flatten_next_fu_108_p2 = (indvar_flatten_fu_60 + 13'd1);

endmodule //forward
