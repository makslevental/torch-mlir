//
// Created by maksim on 4/16/22.
//

#include <iostream>
#include <limits>
#include <math.h>

typedef std::numeric_limits<float> single;

const static unsigned int magic_constants[] = {
    0x800'000, 0x1000000, 0x1800000, 0x2000000, 0x2800000, 0x3000000, 0x3800000, 0x4000000, 0x4800000, 0x5000000,
    0x5800000, 0x6000000, 0x6800000, 0x7000000, 0x7800000, 0x8000000, 0x8800000, 0x9000000, 0x9800000, 0xa000000,
    0xa800000, 0xb000000, 0xb800000, 0xc000000, 0xc800000, 0xd000000, 0xd800000, 0xe000000, 0xe800000, 0xf000000,
    0xf800000, 0x10000000, 0x10800000, 0x11000000, 0x11800000, 0x12000000, 0x12800000, 0x13000000, 0x13800000, 0x14000000,
    0x14800000, 0x15000000, 0x15800000, 0x16000000, 0x16800000, 0x17000000, 0x17800000, 0x18000000, 0x18800000, 0x19000000,
    0x19800000, 0x1a000000, 0x1a800000, 0x1b000000, 0x1b800000, 0x1c000000, 0x1c800000, 0x1d000000, 0x1d800000, 0x1e000000,
    0x1e800000, 0x1f000000, 0x1f800000, 0x20000000, 0x20800000, 0x21000000, 0x21800000, 0x22000000, 0x22800000, 0x23000000,
    0x23800000, 0x24000000, 0x24800000, 0x25000000, 0x25800000, 0x26000000, 0x26800000, 0x27000000, 0x27800000, 0x28000000,
    0x28800000, 0x29000000, 0x29800000, 0x2a000000, 0x2a800000, 0x2b000000, 0x2b800000, 0x2c000000, 0x2c800000, 0x2d000000,
    0x2d800000, 0x2e000000, 0x2e800000, 0x2f000000, 0x2f800000, 0x30000000, 0x30800000, 0x31000000, 0x31800000, 0x32000000,
    0x32800000, 0x33000000, 0x33800000, 0x34000000, 0x34800000, 0x35000000, 0x35800000, 0x36000000, 0x36800000, 0x37000000,
    0x37800000, 0x38000000, 0x38800000, 0x39000000, 0x39800000, 0x3a000000, 0x3a800000, 0x3b000000, 0x3b800000, 0x3c000000,
    0x3c800000, 0x3d000000, 0x3d800000, 0x3e000000, 0x3e800000, 0x3f000000, 0x3f800000, 0x40000000, 0x40800000, 0x41000000,
    0x41800000, 0x42000000, 0x42800000, 0x43000000, 0x43800000, 0x44000000, 0x44800000, 0x45000000, 0x45800000, 0x46000000,
    0x46800000, 0x47000000, 0x47800000, 0x48000000, 0x48800000, 0x49000000, 0x49800000, 0x4a000000, 0x4a800000, 0x4b000000,
    0x4b800000, 0x4c000000, 0x4c800000, 0x4d000000, 0x4d800000, 0x4e000000, 0x4e800000, 0x4f000000, 0x4f800000, 0x50000000,
    0x50800000, 0x51000000, 0x51800000, 0x52000000, 0x52800000, 0x53000000, 0x53800000, 0x54000000, 0x54800000, 0x55000000,
    0x55800000, 0x56000000, 0x56800000, 0x57000000, 0x57800000, 0x58000000, 0x58800000, 0x59000000, 0x59800000, 0x5a000000,
    0x5a800000, 0x5b000000, 0x5b800000, 0x5c000000, 0x5c800000, 0x5d000000, 0x5d800000, 0x5e000000, 0x5e800000, 0x5f000000,
    0x5f800000, 0x60000000, 0x60800000, 0x61000000, 0x61800000, 0x62000000, 0x62800000, 0x63000000, 0x63800000, 0x64000000,
    0x64800000, 0x65000000, 0x65800000, 0x66000000, 0x66800000, 0x67000000, 0x67800000, 0x68000000, 0x68800000, 0x69000000,
    0x69800000, 0x6a000000, 0x6a800000, 0x6b000000, 0x6b800000, 0x6c000000, 0x6c800000, 0x6d000000, 0x6d800000, 0x6e000000,
    0x6e800000, 0x6f000000, 0x6f800000, 0x70000000, 0x70800000, 0x71000000, 0x71800000, 0x72000000, 0x72800000, 0x73000000,
    0x73800000, 0x74000000, 0x74800000, 0x75000000, 0x75800000, 0x76000000, 0x76800000, 0x77000000, 0x77800000, 0x78000000,
    0x78800000, 0x79000000, 0x79800000, 0x7a000000, 0x7a800000, 0x7b000000, 0x7b800000, 0x7c000000, 0x7c800000, 0x7d000000,
    0x7d800000, 0x7e000000, 0x7e800000, 0x7f000000, 0x7EEEEEEE
};




float inverse(float x, unsigned int magic_constant) {
  // re-interpret as a 32 bit integer
  unsigned int *i = (unsigned int *)&x;

  // adjust exponent
  *i = magic_constant - *i;

  return x;
}

int main() {
  std::cout.precision(175);
  //  float f = 100.0;
  //  auto inv_f = inverse(f, 126);
  //  std::cout << std::fixed << inv_f << "\n";
  //
  //  unsigned int i = 1120403456; // 100
  //  float *g = (float *)&i;
  //  inv_f = inverse(*g, 126);
  //  std::cout << std::fixed << inv_f << "\n";
  //  std::cout << std::fixed << 1 / (*g) << "\n";

  unsigned int first_non_denorm_float = 0x800'000;
//  unsigned int first_non_denorm_float = 0;
  unsigned int N = (2<<30) - first_non_denorm_float;
//  unsigned int magic_constant = 0x7ef477d4;
  unsigned int magic_constant = 0x7ed5554c;
  double abs_error = 0;
  double rel_error = 0;
  std::cout << "magic constant " << std::hex << 0x7ef477d4 << "\n";
  for (int i = 0; i < 254; ++i) {
    for (unsigned int j = 0; j < (1 << 23); ++j) {
      unsigned int jj = j + first_non_denorm_float + i; // so that not denorm
      float g;
      *(unsigned int *)&g = jj;
      float true_inv_g = 1 / g;

      float approx_inv_g = inverse(g, magic_constant);
      approx_inv_g = 2 * approx_inv_g - g * pow(approx_inv_g, 2);
      float _abs_error = std::abs(true_inv_g - approx_inv_g);

      abs_error += (double)_abs_error;
      rel_error += (double)_abs_error/(double)true_inv_g;
      if (isnan(abs_error) || isnan(rel_error)) {
        std::cout << jj << "\n";
        exit(-1);
      }
    }
  }
  std::cout << "avg abs_error " << abs_error/N << "\n";
  std::cout << "avg rel_error " << rel_error/N << "\n";

}


//magic constant = 0x7f000000
//01111111000000000000000000000000
//1.7014118346e+38
//170141183460469231731687303715884105728
//
//g = 1.17549435082e-38 = 1*2^-126
//1.1754943508222875079687365372222456778186655567720875215087517062784172594547271728515625E-38
//00000000100000000000000000000000
//0x00800000
//
//true 1/g = 8.507059173023462e+37 = 1*2^126
//
//                                                                                0x7f000000 - 0x00800000 = 0x7e800000
//                                                                                             01111110100000000000000000000000
//                                                                                             approx 1/g = 8.50705917302e+37
